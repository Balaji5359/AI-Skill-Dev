import React, { useEffect, useState } from "react";
import { useLocation } from "react-router-dom";
import { FaStar } from "react-icons/fa";
import "./techlist.css";

function Placement_Prediction1() {
    const location = useLocation();
    const fields = location.state?.selectedFields || {};
    const field1 = fields.field1 || "Not selected";
    const field2 = fields.field2 || "Not selected";
    const field3 = fields.field3 || "Not selected";

    const [apiData1, setApiData1] = useState(null);
    const [apiData2, setApiData2] = useState(null);
    const [apiData3, setApiData3] = useState(null);

    const [showCategories, setShowCategories] = useState({ field1: false, field2: false, field3: false });
    const [activeCategory, setActiveCategory] = useState({ field1: null, field2: null, field3: null });
    const [skillRatings, setSkillRatings] = useState({});
    const [hoveredSkill, setHoveredSkill] = useState({});

    const fetchFieldData = async (field, setApiData) => {
        if (!field || field === "Not selected") {
            setApiData(null);
            return;
        }
        const url = "https://3fdpsseodc.execute-api.ap-south-1.amazonaws.com/dev/field_data";
        const field_data = {
            "queryStringParameters": {
                "field": field
            }
        };
        try {
            const response = await fetch(url, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(field_data),
            });
            const data = await response.json();
            let parsed = {};
            try {
                parsed = typeof data.body === "string" ? JSON.parse(data.body) : data.body;
            } catch (e) {
                console.error("Error parsing API response:", e);
            }
            setApiData(parsed);
        } catch (error) {
            console.log("Error", error);
            setApiData(null);
        }
    };

    useEffect(() => {
        fetchFieldData(field1, setApiData1);
        fetchFieldData(field2, setApiData2);
        fetchFieldData(field3, setApiData3);
    }, [field1, field2, field3]);

    const mainCategories = [
        "Mathematics and Statistics",
        "Programming",
        "ML Tools and Libraries",
        "Machine Learning",
        "Frontend Development",
        "Backend Development",
        "Version Control",
        "DevOps",
        "Problem Solving",
        "Soft Skills"
    ];

    // Handler for rating change
    const handleRating = (skill, ratingValue) => {
        setSkillRatings(prev => ({
            ...prev,
            [skill]: ratingValue
        }));
    };

    // Handler for hover
    const handleHover = (skill, hoverValue) => {
        setHoveredSkill(prev => ({
            ...prev,
            [skill]: hoverValue
        }));
    };

    // Helper to render category buttons
    const renderCategoryButtons = (apiData, fieldKey) => {
        if (!apiData || !apiData["Skills Required"]) return null;
        return (
            <>
                <div style={{ display: "flex", gap: "1em", flexWrap: "wrap", margin: "1em 0" }}>
                    {mainCategories.map(category => (
                        apiData["Skills Required"][category] && (
                            <button
                                key={category}
                                className="tech-list-button"
                                style={{
                                    background: activeCategory[fieldKey] === category ? "#357abd" : "",
                                    color: activeCategory[fieldKey] === category ? "#fff" : ""
                                }}
                                onClick={() =>
                                    setActiveCategory(prev => ({ ...prev, [fieldKey]: category }))
                                }
                            >
                                {category}
                            </button>
                        )
                    ))}
                </div>
                {/* add break */}
                <br />
            </>
        );
    };

    // Helper to render skills for a category
    const renderSkillsForCategory = (apiData, fieldKey) => {
        const category = activeCategory[fieldKey];
        if (!category || !apiData || !apiData["Skills Required"] || !apiData["Skills Required"][category]) return null;
        const skills = apiData["Skills Required"][category];
        return (
            <div>
                <button
                    className="tech-list-button"
                    style={{ marginBottom: "1em", background: "#e74c3c", color: "#fff" }}
                    onClick={() => setActiveCategory(prev => ({ ...prev, [fieldKey]: null }))}
                >
                    Back
                </button>
                <ul style={{ display: "flex", flexDirection: "column", gap: "1em" }}>
                    {skills.map((skill, idx) => (
                        <li key={idx} style={{ borderBottom: "1px solid #e3eafc", paddingBottom: "0.7em" }}>
                            <h4 style={{ margin: 0 }}>{skill}</h4>
                            <p style={{ margin: "0.2em 0" }}>Rate this skill:</p>
                            <div className="star-rating" style={{ display: "flex", alignItems: "center" }}>
                                {[...Array(5)].map((star, i) => {
                                    const ratingValue = i + 1;
                                    return (
                                        <label key={ratingValue}>
                                            <input
                                                type="radio"
                                                name={`rating-${fieldKey}-${skill}`}
                                                value={ratingValue}
                                                style={{ display: "none" }}
                                                onClick={() => handleRating(`${fieldKey}-${skill}`, ratingValue)}
                                            />
                                            <FaStar
                                                className="star"
                                                color={ratingValue <= (hoveredSkill[`${fieldKey}-${skill}`] || skillRatings[`${fieldKey}-${skill}`] || 0) ? "#ffc107" : "#e4e5e9"}
                                                onMouseEnter={() => handleHover(`${fieldKey}-${skill}`, ratingValue)}
                                                onMouseLeave={() => handleHover(`${fieldKey}-${skill}`, 0)}
                                            />
                                        </label>
                                    );
                                })}
                                <span style={{ marginLeft: "1em" }}>
                                    Your rating: {skillRatings[`${fieldKey}-${skill}`] || 0} / 5
                                </span>
                            </div>
                        </li>
                    ))}
                    <li style={{ marginTop: "1em" }}>
                        <button
                            className="tech-list-button"
                            onClick={() => alert(`Ratings for ${fieldKey} - ${category} submitted!`)}
                        >
                            Submit Ratings for {category}
                        </button>
                    </li>
                </ul>
            </div>
        );
    };

    // Helper to render each field section
    const renderFieldSection = (fieldLabel, fieldValue, apiData, fieldKey) => (
        <div style={{ marginBottom: "2em", background: "#f5f7fa", borderRadius: "12px", padding: "1.5em" }}>
            <h2>{fieldLabel}: {fieldValue}</h2>
            {!showCategories[fieldKey] && fieldValue !== "Not selected" && (
                <button
                    className="tech-list-button"
                    onClick={() => {
                        setShowCategories(prev => ({ ...prev, [fieldKey]: true }));
                        setActiveCategory(prev => ({ ...prev, [fieldKey]: null }));
                    }}
                >
                    Start
                </button>
            )}
            {showCategories[fieldKey] && (
                <>
                    {!activeCategory[fieldKey] && renderCategoryButtons(apiData, fieldKey)}
                    {activeCategory[fieldKey] && renderSkillsForCategory(apiData, fieldKey)}
                    {activeCategory[fieldKey] === null && (
                        <button
                            className="tech-list-button"
                            style={{ marginTop: "1em", background: "#e74c3c", color: "#fff" }}
                            onClick={() => setShowCategories(prev => ({ ...prev, [fieldKey]: false }))}
                        >
                            Back
                        </button>
                    )}
                </>
            )}
        </div>
    );

    return (
        <div style={{ maxWidth: 900, margin: "0 auto", padding: "2em" }}>
            <h1>Placement Prediction</h1>
            <h3>Field 1: {field1}</h3>
            <h3>Field 2: {field2}</h3>
            <h3>Field 3: {field3}</h3>
            <h4>Job Role: {fields.jobRole || "Not specified"}</h4>
            <h4>Company Type: {fields.companyType || "Not specified"}</h4>
            <h4>Dream Company: {fields.dreamCompany || "Not specified"}</h4>
            {renderFieldSection("Field 1", field1, apiData1, "field1")}
            {renderFieldSection("Field 2", field2, apiData2, "field2")}
            {renderFieldSection("Field 3", field3, apiData3, "field3")}
            <h2>All Skill Ratings:</h2>
            <ul>
                {Object.entries(skillRatings).map(([skill, rating]) => (
                    <li key={skill}>{skill}: {rating} / 5</li>
                ))}
            </ul>
        </div>
    );
}

export default Placement_Prediction1;


Tech.jsx
import React, { useEffect, useState } from 'react';
import { useLocation } from 'react-router-dom';
import "./techlist.css"; // Assuming you have a CSS file for styling

function Tech() {
    const location = useLocation();
    const field = location.state?.techName || "Unknown";

    // State to hold parsed API data
    const [apiData, setApiData] = useState(null);

    useEffect(() => {
        const url = "https://3fdpsseodc.execute-api.ap-south-1.amazonaws.com/dev/field_data";
        const field_data = {
            "queryStringParameters": {
                "field": field
            }
        };

        const headers = {
            "Content-Type": "application/json",
        };

        fetch(url, {
            method: "POST",
            headers: headers,
            body: JSON.stringify(field_data),
        })
        .then(response => response.json())
        .then(data => {
            // Parse the JSON string in data.body
            let parsed = {};
            try {
                parsed = typeof data.body === "string" ? JSON.parse(data.body) : data.body;
            } catch (e) {
                console.error("Error parsing API response:", e);
            }
            setApiData(parsed);
        })
        .catch(error => {
            console.log("Error", error);
        });
    }, [field]);
    console.log(apiData);
    return (
        <div className="tech-data">
            {apiData ? (
                <div>
                    <h3>{apiData.field}</h3>
                    <p>{apiData.description}</p>
                    <h4>Skills Required</h4>
                    <ul>
                        {apiData["Skills Required"] &&
                            Object.entries(apiData["Skills Required"]).map(([category, skills]) => (
                                <li key={category}>
                                    <strong>{category}:</strong>
                                    <ul>
                                        {skills.map((skill, idx) => (
                                            <li key={idx}>{skill}</li>
                                        ))}
                                    </ul>
                                </li>
                            ))
                        }
                    </ul>
                    <h4>Job Roles</h4>
                    <ul>
                        {apiData["Job Roles"]?.Entry_Level_Roles?.map((roleObj, idx) => {
                            const roleName = Object.keys(roleObj)[0];
                            const role = roleObj[roleName];
                            return (
                                <li key={idx}>
                                    <strong>{roleName}</strong>
                                    <div>
                                        <b>Responsibilities:</b>
                                        <ul>
                                            {role.Responsibilities.map((r, i) => <li key={i}>{r}</li>)}
                                        </ul>
                                        <b>Skills:</b> {role.Skills.join(", ")}
                                    </div>
                                </li>
                            );
                        })}
                    </ul>
                    <h4>Top Companies Hiring</h4>
                    <div className="company-list" style={{display: "flex", gap: "2em"}}>
                        {apiData["Top Companies Hiring"] && Object.entries(apiData["Top Companies Hiring"]).map(([type, companies]) => (
                            <div key={type}>
                                <b>{type}</b>
                                <ul>
                                    {companies.map((c, i) => <li key={i}>{c}</li>)}
                                </ul>
                            </div>
                        ))}
                    </div>
                    <h4>Alumni & Employee Profiles</h4>
                    <div className="profiles-list" style={{display: "flex", gap: "1.5em", flexWrap: "wrap"}}>
                        {apiData["Alumni & Employee Profiles"] && apiData["Alumni & Employee Profiles"].map((profile, idx) => {
                            // Inject class and style into the <img> tag
                            let photoHtml = profile.Photo
                                ? profile.Photo.replace(
                                    /<img /,
                                    '<img class="profile-photo-img" style="width:60px;height:60px;object-fit:cover;border-radius:50%;margin-bottom:0.5em;" '
                                )
                                : "";

                            return (
                                <div key={idx} className="profile-card" style={{
                                    background: "#f5f7fa",
                                    borderRadius: "10px",
                                    padding: "1em",
                                    minWidth: "220px",
                                    display: "flex",
                                    flexDirection: "column",
                                    alignItems: "center"
                                }}>
                                    <div dangerouslySetInnerHTML={{ __html: photoHtml }} />
                                    <b>{profile.Name}</b>
                                    <div>{profile.Address}</div>
                                    <div>Experience: {profile.Experience}</div>
                                    <div>Salary: {profile.Salary}</div>
                                    <div>Skills: {profile.Skills.join(", ")}</div>
                                    <a href={profile.LinkedIn} target="_blank" rel="noopener noreferrer">LinkedIn</a><br />
                                    <a href={profile.Website} target="_blank" rel="noopener noreferrer">Website</a>
                                    <div>
                                        {profile.WorkSamples && profile.WorkSamples.map((ws, i) => (
                                            <a key={i} href={ws.url} target="_blank" rel="noopener noreferrer" style={{ marginRight: "0.5em" }}>{ws.label}</a>
                                        ))}
                                    </div>
                                </div>
                            );
                        })}
                    </div>
                </div>
            ) : (
                <p>Loading data...</p>
            )}
        </div>
    );
}

export default Tech;
